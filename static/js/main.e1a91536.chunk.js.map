{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js","components/ContactList/ContactList.module.css"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","uuidv4","numberInputId","reset","event","preventDefault","htmlFor","type","pattern","title","required","value","onChange","currentTarget","id","Filter","ContactListItem","onDeleteContact","className","css","contactList__item","contactList__text","onClick","ContactList","contacts","map","contact","App","setContacts","filter","setFilter","useEffect","localStorage","setItem","JSON","stringify","newContacts","getItem","parse","normalizedFilter","toLowerCase","visibleContacts","includes","find","alert","contactId","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e1a91536.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function ContactForm ({ onSubmit }) {\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const nameInputId = uuidv4();\r\n    const numberInputId = uuidv4();\r\n\r\n    const handleChangeName = (event) => {\r\n        const { value } = event.currentTarget;\r\n        setName(() => value);\r\n    };\r\n\r\n    const handleChangeNumber = (event) => {\r\n        const { value } = event.currentTarget;\r\n        setNumber(() => value);\r\n    }\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n\r\n        onSubmit({ name, number });\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setName(() => '');\r\n        setNumber(() => '');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor={nameInputId}>\r\n                Name{' '}       \r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n\r\n                    value={name}\r\n                    onChange={handleChangeName}\r\n                    id={nameInputId}\r\n                />\r\n            </label> <br/><br/>\r\n            <label htmlFor={numberInputId}> \r\n                Number{' '}       \r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n\r\n                    value={number}\r\n                    onChange={handleChangeNumber}\r\n                    id={numberInputId}\r\n                />\r\n            </label><br/> <br/>\r\n            <button type='submit'>Add contact</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n    return (\r\n        <label>\r\n            Find contacts by name  <br/>     \r\n            <input\r\n                type=\"text\" \r\n                value={value}\r\n                onChange = {onChange}\r\n            />\r\n        </label>\r\n    )\r\n};\r\n\r\nexport default Filter;","import PropTypes from \"prop-types\";\r\nimport React from 'react';\r\nimport css from './ContactList.module.css';\r\n\r\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => {\r\n    return (\r\n        <li key={id} className={css.contactList__item}>\r\n            <p className={css.contactList__text}>{name}: {number}</p>\r\n            <button onClick={onDeleteContact}>Delete</button>\r\n        </li>\r\n    );\r\n  };\r\n\r\n  ContactListItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n  };\r\n  \r\nexport default ContactListItem;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport ContactListItem from './ContactListItem';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n    return (\r\n        <ul>\r\n            {contacts.map((contact) => (\r\n                <ContactListItem \r\n                    key = {contact.id}\r\n                    name = {contact.name}\r\n                    number = {contact.number}\r\n                    onDeleteContact = {() => onDeleteContact(contact.id)}\r\n                />  \r\n            ))}\r\n        </ul>\r\n    )\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n  };\r\n\r\nexport default ContactList;","import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n// import initialContacts from './components/ContactList/contacts.json';\n\n\nexport default function App() {\n\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  const deleteContact = (contactId) => {\n    setContacts(prevState => prevState.filter(contact => contact.id !== contactId));\n  };\n\n  const formSubmitHandler = ({ name, number}) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number\n    }\n\n    if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())){\n      return alert(`${contact.name} is already exist!`);\n    } else {  \n      setContacts((contacts) => [contact, ...contacts]);\n    }\n  };\n\n  const changeFilter = (event) => {\n    setFilter(() => event.currentTarget.value);\n  }; \n\n  \n\n  useEffect(() =>{   \n    localStorage.setItem('contacts', JSON.stringify(contacts));\n\n    const newContacts = localStorage.getItem('contacts');  \n    const parsedContacts = JSON.parse(newContacts);      \n    \n    // if(parsedContacts){\n    //   setContacts(() => parsedContacts);\n    // }\n  }, [contacts]);\n\n  // то, что надо перевести на ХУКИ \n  // const componentDidMount = () => {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if(parsedContacts){\n  //     this.setState({ contacts: parsedContacts });\n  //   }    \n  // }\n\n\n  // const componentDidUpdate = (prevState) => {\n  //   if(this.state.contacts !== prevState.contacts){\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n\n  return (\n    <div>          \n    <h1>Phonebook</h1>\n      <ContactForm \n        onSubmit = {formSubmitHandler}\n      />\n\n    <h2>Contacts</h2> \n      <Filter \n        value={filter} \n        onChange = {changeFilter}\n      />\n      \n      <ContactList \n        contacts = {visibleContacts} \n        onDeleteContact = {deleteContact}\n      /> \n    </div>\n  )\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList__item\":\"ContactList_contactList__item__Y9lqp\",\"contactList__text\":\"ContactList_contactList__text__1RdNq\"};"],"sourceRoot":""}